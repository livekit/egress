// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: ipc.proto

package ipc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EgressService_HandlerReady_FullMethodName        = "/ipc.EgressService/HandlerReady"
	EgressService_HandlerShuttingDown_FullMethodName = "/ipc.EgressService/HandlerShuttingDown"
)

// EgressServiceClient is the client API for EgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EgressServiceClient interface {
	HandlerReady(ctx context.Context, in *HandlerReadyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HandlerShuttingDown(ctx context.Context, in *HandlerShuttingDownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type egressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEgressServiceClient(cc grpc.ClientConnInterface) EgressServiceClient {
	return &egressServiceClient{cc}
}

func (c *egressServiceClient) HandlerReady(ctx context.Context, in *HandlerReadyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EgressService_HandlerReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egressServiceClient) HandlerShuttingDown(ctx context.Context, in *HandlerShuttingDownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EgressService_HandlerShuttingDown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EgressServiceServer is the server API for EgressService service.
// All implementations must embed UnimplementedEgressServiceServer
// for forward compatibility
type EgressServiceServer interface {
	HandlerReady(context.Context, *HandlerReadyRequest) (*emptypb.Empty, error)
	HandlerShuttingDown(context.Context, *HandlerShuttingDownRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEgressServiceServer()
}

// UnimplementedEgressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEgressServiceServer struct {
}

func (UnimplementedEgressServiceServer) HandlerReady(context.Context, *HandlerReadyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerReady not implemented")
}
func (UnimplementedEgressServiceServer) HandlerShuttingDown(context.Context, *HandlerShuttingDownRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerShuttingDown not implemented")
}
func (UnimplementedEgressServiceServer) mustEmbedUnimplementedEgressServiceServer() {}

// UnsafeEgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EgressServiceServer will
// result in compilation errors.
type UnsafeEgressServiceServer interface {
	mustEmbedUnimplementedEgressServiceServer()
}

func RegisterEgressServiceServer(s grpc.ServiceRegistrar, srv EgressServiceServer) {
	s.RegisterService(&EgressService_ServiceDesc, srv)
}

func _EgressService_HandlerReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlerReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressServiceServer).HandlerReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgressService_HandlerReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressServiceServer).HandlerReady(ctx, req.(*HandlerReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgressService_HandlerShuttingDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlerShuttingDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressServiceServer).HandlerShuttingDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgressService_HandlerShuttingDown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressServiceServer).HandlerShuttingDown(ctx, req.(*HandlerShuttingDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EgressService_ServiceDesc is the grpc.ServiceDesc for EgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipc.EgressService",
	HandlerType: (*EgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandlerReady",
			Handler:    _EgressService_HandlerReady_Handler,
		},
		{
			MethodName: "HandlerShuttingDown",
			Handler:    _EgressService_HandlerShuttingDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc.proto",
}

const (
	EgressHandler_GetPipelineDot_FullMethodName = "/ipc.EgressHandler/GetPipelineDot"
	EgressHandler_GetPProf_FullMethodName       = "/ipc.EgressHandler/GetPProf"
	EgressHandler_GetMetrics_FullMethodName     = "/ipc.EgressHandler/GetMetrics"
)

// EgressHandlerClient is the client API for EgressHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EgressHandlerClient interface {
	GetPipelineDot(ctx context.Context, in *GstPipelineDebugDotRequest, opts ...grpc.CallOption) (*GstPipelineDebugDotResponse, error)
	GetPProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfResponse, error)
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type egressHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewEgressHandlerClient(cc grpc.ClientConnInterface) EgressHandlerClient {
	return &egressHandlerClient{cc}
}

func (c *egressHandlerClient) GetPipelineDot(ctx context.Context, in *GstPipelineDebugDotRequest, opts ...grpc.CallOption) (*GstPipelineDebugDotResponse, error) {
	out := new(GstPipelineDebugDotResponse)
	err := c.cc.Invoke(ctx, EgressHandler_GetPipelineDot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egressHandlerClient) GetPProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfResponse, error) {
	out := new(PProfResponse)
	err := c.cc.Invoke(ctx, EgressHandler_GetPProf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egressHandlerClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, EgressHandler_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EgressHandlerServer is the server API for EgressHandler service.
// All implementations must embed UnimplementedEgressHandlerServer
// for forward compatibility
type EgressHandlerServer interface {
	GetPipelineDot(context.Context, *GstPipelineDebugDotRequest) (*GstPipelineDebugDotResponse, error)
	GetPProf(context.Context, *PProfRequest) (*PProfResponse, error)
	GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	mustEmbedUnimplementedEgressHandlerServer()
}

// UnimplementedEgressHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedEgressHandlerServer struct {
}

func (UnimplementedEgressHandlerServer) GetPipelineDot(context.Context, *GstPipelineDebugDotRequest) (*GstPipelineDebugDotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineDot not implemented")
}
func (UnimplementedEgressHandlerServer) GetPProf(context.Context, *PProfRequest) (*PProfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPProf not implemented")
}
func (UnimplementedEgressHandlerServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedEgressHandlerServer) mustEmbedUnimplementedEgressHandlerServer() {}

// UnsafeEgressHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EgressHandlerServer will
// result in compilation errors.
type UnsafeEgressHandlerServer interface {
	mustEmbedUnimplementedEgressHandlerServer()
}

func RegisterEgressHandlerServer(s grpc.ServiceRegistrar, srv EgressHandlerServer) {
	s.RegisterService(&EgressHandler_ServiceDesc, srv)
}

func _EgressHandler_GetPipelineDot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GstPipelineDebugDotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressHandlerServer).GetPipelineDot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgressHandler_GetPipelineDot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressHandlerServer).GetPipelineDot(ctx, req.(*GstPipelineDebugDotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgressHandler_GetPProf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PProfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressHandlerServer).GetPProf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgressHandler_GetPProf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressHandlerServer).GetPProf(ctx, req.(*PProfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgressHandler_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressHandlerServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgressHandler_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressHandlerServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EgressHandler_ServiceDesc is the grpc.ServiceDesc for EgressHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EgressHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipc.EgressHandler",
	HandlerType: (*EgressHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPipelineDot",
			Handler:    _EgressHandler_GetPipelineDot_Handler,
		},
		{
			MethodName: "GetPProf",
			Handler:    _EgressHandler_GetPProf_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _EgressHandler_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc.proto",
}
