// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ipc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EgressHandlerClient is the client API for EgressHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EgressHandlerClient interface {
	GetPipelineDot(ctx context.Context, in *GstPipelineDebugDotRequest, opts ...grpc.CallOption) (*GstPipelineDebugDotResponse, error)
	GetPProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfResponse, error)
}

type egressHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewEgressHandlerClient(cc grpc.ClientConnInterface) EgressHandlerClient {
	return &egressHandlerClient{cc}
}

func (c *egressHandlerClient) GetPipelineDot(ctx context.Context, in *GstPipelineDebugDotRequest, opts ...grpc.CallOption) (*GstPipelineDebugDotResponse, error) {
	out := new(GstPipelineDebugDotResponse)
	err := c.cc.Invoke(ctx, "/ipc.EgressHandler/GetPipelineDot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egressHandlerClient) GetPProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfResponse, error) {
	out := new(PProfResponse)
	err := c.cc.Invoke(ctx, "/ipc.EgressHandler/GetPProf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EgressHandlerServer is the server API for EgressHandler service.
// All implementations must embed UnimplementedEgressHandlerServer
// for forward compatibility
type EgressHandlerServer interface {
	GetPipelineDot(context.Context, *GstPipelineDebugDotRequest) (*GstPipelineDebugDotResponse, error)
	GetPProf(context.Context, *PProfRequest) (*PProfResponse, error)
	mustEmbedUnimplementedEgressHandlerServer()
}

// UnimplementedEgressHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedEgressHandlerServer struct {
}

func (UnimplementedEgressHandlerServer) GetPipelineDot(context.Context, *GstPipelineDebugDotRequest) (*GstPipelineDebugDotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineDot not implemented")
}
func (UnimplementedEgressHandlerServer) GetPProf(context.Context, *PProfRequest) (*PProfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPProf not implemented")
}
func (UnimplementedEgressHandlerServer) mustEmbedUnimplementedEgressHandlerServer() {}

// UnsafeEgressHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EgressHandlerServer will
// result in compilation errors.
type UnsafeEgressHandlerServer interface {
	mustEmbedUnimplementedEgressHandlerServer()
}

func RegisterEgressHandlerServer(s grpc.ServiceRegistrar, srv EgressHandlerServer) {
	s.RegisterService(&EgressHandler_ServiceDesc, srv)
}

func _EgressHandler_GetPipelineDot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GstPipelineDebugDotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressHandlerServer).GetPipelineDot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipc.EgressHandler/GetPipelineDot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressHandlerServer).GetPipelineDot(ctx, req.(*GstPipelineDebugDotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgressHandler_GetPProf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PProfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressHandlerServer).GetPProf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipc.EgressHandler/GetPProf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressHandlerServer).GetPProf(ctx, req.(*PProfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EgressHandler_ServiceDesc is the grpc.ServiceDesc for EgressHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EgressHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipc.EgressHandler",
	HandlerType: (*EgressHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPipelineDot",
			Handler:    _EgressHandler_GetPipelineDot_Handler,
		},
		{
			MethodName: "GetPProf",
			Handler:    _EgressHandler_GetPProf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc.proto",
}
